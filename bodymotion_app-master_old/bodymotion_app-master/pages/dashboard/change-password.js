import Head from "next/head";
import { Col, Row } from "reactstrap";
import FullLayout from "../../src/layouts/FullLayout";
import { useEffect, useState } from "react";
import React from 'react';
import { BACKEND_URL, MAIN_TOKEN } from "../../constants/Config";
import { Card, CardBody, CardSubtitle, CardTitle, Form, FormGroup, Label, Input, Button, FormText, Spinner } from "reactstrap";
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { SignJWT, jwtVerify, JWTPayload } from 'jose';
import { getCookie } from "cookies-next";

function Home({ cookie }) {
    const successNotify = () => toast.success("Success");
    const errorNotify = () => toast.error("Error");

    const [token, setToken] = useState("");
    const [loading, setLoading] = useState(false)
    const [currentPassword, setCurrentPassword] = useState("")
    const [password, setPassword] = useState("")
    const [repeatPassword, setRepeatPassword] = useState("")

    useEffect(() => {
        // var jwt = require('jsonwebtoken');
        // var decoded = jwt.verify(cookie, MAIN_TOKEN);
        const handleCookie = async () => {
            const { payload } = await jwtVerify(cookie, new TextEncoder().encode(MAIN_TOKEN));
            setToken(payload.token);
        }
        // handleCookie();
        const cookie = getCookie("token");
        setToken(cookie);
    }, [cookie])


    const handleSubmit = async (event) => {
        event.preventDefault();

        if (password === repeatPassword) {
            setLoading(true);

            const response = await fetch(BACKEND_URL + '/change-password', {
                method: 'POST',
                headers: new Headers({
                    'Authorization': 'Bearer ' + token,
                    'Content-Type': 'application/json',
                }),
                body: JSON.stringify({ old_password: currentPassword, new_password: password, new_password_confirmation: repeatPassword })
            });
            if (response.status == 204) {
                successNotify();
            } else {
                errorNotify();
            }
        } else {
            errorNotify();
        }

        setLoading(false);
    }

    return (
        <div>
            <Head>
                <title>BodyMotion Change Password</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.png" />
            </Head>
            <div>
                <Row style={{ justifyContent: 'center' }}>
                    <Card style={{ width: 600, alignSelf: "center", marginTop: 20 }}>
                        <CardBody>
                            <CardTitle tag="h5" style={{ textAlign: 'center' }}><i className="bi bi-lock-fill"></i>&nbsp;Change password</CardTitle>
                            <CardSubtitle className="text-muted" style={{ textAlign: 'center' }} tag="h6">
                                Please fill out the form below to change your password
                            </CardSubtitle>
                            <Form onSubmit={handleSubmit}>
                                <FormGroup>
                                    <Label for="exampleEmail">
                                        Current password
                                    </Label>
                                    <Input
                                        id="exampleEmail"
                                        name="email"
                                        placeholder="Current password"
                                        type="password"
                                        onChange={e => { setCurrentPassword(e.target.value) }}
                                    />
                                </FormGroup>
                                <FormGroup>
                                    <Label for="exampleEmail">
                                        Password
                                    </Label>
                                    <Input
                                        id="exampleEmail"
                                        name="email"
                                        placeholder="Password"
                                        type="password"
                                        onChange={e => { setPassword(e.target.value) }}
                                    />
                                </FormGroup>
                                <FormGroup>
                                    <Label for="examplePassword">
                                        Repeat password
                                    </Label>
                                    <Input
                                        id="examplePassword"
                                        name="password"
                                        placeholder="Repeat password"
                                        type="password"
                                        onChange={e => { setRepeatPassword(e.target.value) }}
                                    />
                                </FormGroup>

                                {loading ?
                                    <Spinner>
                                        Loading...
                                    </Spinner>
                                    :
                                    <Button>
                                        Submit
                                    </Button>
                                }
                            </Form>
                        </CardBody>
                    </Card>
                </Row>
            </div>
            <ToastContainer />

        </div>
    );
}

export async function getServerSideProps({ req, res }) {
    return {
        props: { cookie: req.cookies.OursiteJWT }, // will be passed to the page component as props
    }
}

export default Home